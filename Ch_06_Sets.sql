-- How to sign back onto the SQL server.
/*
export PATH=$PATH:/Applications/MySQLWorkbench.app/Contents/MacOS
mysql -u Study -p bank;
*/

-- SQL set operators
-- Both data sets must have the same number of columns
-- The data type must be the same

-- 01: Compound query, "adding them vertically."
-- combines multiple but otherwise independent queries.
select 1 num, 'george' name
union
select 5 num, 'vivian' name;

-- 02: Union and Union all
-- Union takes the two dataset, sort them and select the uniquely new rows 
-- from second dataset and append together as a new dataset.
-- Union all does not sort of account for duplicates that might be added.

-- Book's definition:
-- Union - sorts the combined set and removes duplicates, 
-- whereas union all does not.
-- Union all's final dataset set will always equal the sum of the number of rows
-- of the set being combined.

-- 03: Union all - does not sort or remove duplicates
select 'IND' type_cd, cust_id, lname name
from individual
    union all
select 'BUS' type_cd, cust_id, name
from business
    union all
    /* Prove to you that it does not remove duplicates */
select 'BUS' type_cd, cust_id, name
from business;

/* Output:
+---------+---------+------------------------+
| type_cd | cust_id | name                   |
+---------+---------+------------------------+
| IND     |       1 | Hadley                 |
| IND     |       2 | Tingley                |
| IND     |       3 | Tucker                 |
| IND     |       4 | Hayward                |
| IND     |       5 | Frasier                |
| IND     |       6 | Spencer                |
| IND     |       7 | Young                  |
| IND     |       8 | Blake                  |
| IND     |       9 | Farley                 |
| BUS     |      10 | Chilton Engineering    |
| BUS     |      11 | Northeast Cooling Inc. |
| BUS     |      12 | Superior Auto Body     |
| BUS     |      13 | AAA Insurance Inc.     |
| BUS     |      10 | Chilton Engineering    |
| BUS     |      11 | Northeast Cooling Inc. |
| BUS     |      12 | Superior Auto Body     |
| BUS     |      13 | AAA Insurance Inc.     |
+---------+---------+------------------------+
*/

-- 04: Combine table and exclude duplicate rows
select emp_id
from employee
where assigned_branch_id = 2
    and (title = 'Teller' or title = 'Head Teller')
union
select distinct open_emp_id
from account
where open_branch_id = 2;

-- 05: Intersect and except operator
-- Not in MySQL. Intersect returns overlap as result set
-- Except returns first table minus the second table
-- Except remove all occurrence of duplicates
-- Except all only removed matched occurence of duplicates

-- 06: Set operation rule
-- Usually the column names are the same, but it doesn't have to be the case
select emp_id, assigned_branch_id
from employee
where title = 'Teller'
    union
select open_emp_id, open_branch_id
from account
where product_cd = 'SAV'
order by emp_id;

-- But if you are ordering by the column name in the SECOND dataset, you will
-- get an error.

/* Output:
mysql> select emp_id, assigned_branch_id
    -> from employee
    -> where title = 'Teller'
    ->     union
    -> select open_emp_id, open_branch_id
    -> from account
    -> where product_cd = 'SAV'
    -> order by open_emp_id;
ERROR 1054 (42S22): Unknown column 'open_emp_id' in 'order clause'
*/

-- 07: Set Operation Precedence
/* First union returns all, but second union sort and remove duplicates */
select cust_id
from account
where product_cd in ('SAV', 'MM')
    union all
select a.cust_id
from account a
    inner join branch b on (a.open_branch_id = b.branch_id)
where b.name = 'Woburn Branch'
    union 
select cust_id
from account
where avail_balance between 500 and 2500;

-- When you are using DIFFERENT set operators, then the orders that the query
-- are arranged ARE different.

-- WARNING! In general they are evaluated from top to bottom.
--    In ANSI (American National Standard Institute) SQL calls for 
--    intersection to have precedence over the other set of operators
--    You may dictate the order by enclosing multiple queries in parentheses.

-- In MySQL, neither was implemented, so make sure to use parentheses!

-- Example -- The order is being dictated by programmer.
(select cust_id
from account
where product_cd in ('SAV', 'MM')
union all 
select a.cust_id
from account a
    inner join branch b on (a.open_branch_id = b.branch_id)
where b.name = 'Woburn Branch')
intersect 
(select cust_id
from account
where avail_balance between 500 and 2500
except
select cust_id
from account 
where product_cd = 'CD'
    and avail_balance < 1000)

-- Test your knowledge!!

-- 6.1 If set A = {L M N O P} and set B = {P Q R S T}
-- What sets are generated by the following operations?

-- A union B     = {L M N O P Q R S T}
-- Combine the set A and B 
-- The result set is sorted and duplicate removed.

-- A union all B = {L M N O P P Q R S T}
-- The result set is not sorted, and duplicates not removed.

-- A intersect B = {P}
-- The result set contains only overlap from A and B.

-- A except B    = {L M N O}
-- The result set contains everything in A not in B.

-- 6.2 Write a compound query that finds the first and last name of all
-- individual customers along with the first and last name of all employees.
select fname, lname
from individual
/* Used union all because in case there are individual and employee with
   the same name, still want to see them */
union
select fname, lname
from employee;

-- 6.3 Sort the result by lname
select fname, lname
from individual
union all
select fname, lname
from employee
order by lname;